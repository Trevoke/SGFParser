=INFORMATION
Author: Aldric Giacomoni

Email : aldric@trevoke.net
Are you using this gem? Is there functionality you wish it had? Is something hard to do?
Let me know and I'll make it possible, or easier!

SGF: all formats (but untested with FF < 4)

Ruby: >=1.8.7 (may work with 1.8.6)

=QUICK HOWTO
Example:
 require 'sgf'
 parser = SGF::Parser.new
 tree = parser.parse filename_or_string # => Yes, it's magic!


All trees begin with an empty node ( @root) which allows a simple support of multiple gametrees.

Most games will just care about, say,
 game = tree.games.first #=> The first, most often only, gametree in the SGF file
 node = game.current_node #=> By default, this is the first node, which should have the FF property, and so on.

For any node, one can summon the properties as such:
 node.properties #=> returns a hash of the properties.
A single property can be called, like the comments, for instance, like so:
 node.C #=> returns the comments for this node
 node.pw #=> returns the value of PW (Player White) if it exists on this node
 node["AW"] #=> same as node.aw or node.properties["AW"]
 node[:AW] #=> same as the previous line
 node.comments #=> syntactic sugar, only works for comments
 node.comment #=> same as the previous line

There is also a SGF Indenter. Its purpose is to make SGF files more readable to humans at a glance.
 require 'sgf/indenter' # Done automatically if you require 'sgf'
 indenter = SGF::Indenter.new 'some_ugly_file.sgf' 
 new_string = indenter.parse 'some_ugly_file.sgf' 

___

TODO
- Move methods from the Tree class to the Game class as appropriate
- Implement 'each' for Game and have Tree use that 'each' for iteration.
- examine/fix the smell that when you use add_children, it also sets the parent on the passed-in nodes.
- fix the multiple properties bug in the SGF indenter as well if necessary
- handle merging of games together (they are stored in the same tree and become a variation when they first become distinguishable from all the other games in the tree).
