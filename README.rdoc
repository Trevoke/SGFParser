=INFORMATION
Author: Aldric Giacomoni

Email : aldric@trevoke.net
Are you using this gem? Is there functionality you wish it had? Is something hard to do?
Let me know and I'll make it possible, or easier!

SGF: all formats (but untested with FF < 4)

Ruby: >=1.8.7 (may work with 1.8.6)

=QUICK HOWTO
Example:
 require 'sgf'
 parser = SGF::Parser.new
 tree = parser.parse filename_or_string # => Yes, it's magic!


All trees begin with an empty node ( @root) which allows a simple support of multiple gametrees.

Most games will just care about, say,
 tree.root.children[0] which is the first node of the first gametree.

For any node, one can summon the properties as such:
 node.properties # => returns a hash of the properties.
A single property can be called, like the comments, for instance, like so:
 node.C # => returns the comments for this node.
 node.pw # => returns the value of PW (Player White) if it exists on this node.
 node.comments # => syntactic sugar

The library currently uses method_missing to painlessly return the data. I must admit that this is both clever coding and laziness on my part.

There is also a SGF Indenter. Its purpose is to make SGF files more readable to humans at a glance.
 require 'sgf/indenter' # Done automatically if you require 'sgf'
 indenter = SGF::Indenter.new 'some_ugly_file.sgf' 
 new_string = indenter.parse 'some_ugly_file.sgf' 

___

TODO
- Create a "Game" class that wraps a complete set of () for ease of use
- examine/fix the smell that when you use add_children, it also sets the parent on the passed-in nodes.
- fix the multiple properties bug in the SGF indenter as well if necessary
- handle merging of games together (they are stored in the same tree and become a variation when they first become distinguishable from all the other games in the tree).
